#lang racket

(require parser-tools/yacc
         "lexer.rkt"
         "python-syntax.rkt")

(define prop-testv1-parser
  (parser
   (start declaracoes)
   (end EOF)
   (tokens value-tokens var-tokens syntax-tokens)
   (src-pos)
   (error
    (lambda (a b c d e)
      (begin
        (printf "a = ~a\nb = ~a\nc = ~a\nd = ~a\ne = ~a\n"
                a b c d e) (void))))
   (grammar

    (declaracoes [() '()]
     [(comandos declaracoes)(cons $1 $2)])

    (comandos [(PRINT OPENP expressao CLOSEP)(sprint $3)]
              [(PRINT OPENP expressao CLOSEP)(sprint $3)]
              [(IDENTIFICADOR ATRIBUIDOR INPUT)(input (var $1))] 
              [(IDENTIFICADOR ATRIBUIDOR expressao)(assign (var $1) $3)])
              
    (expressao [(NUMERO) (value $1)]
               [(IDENTIFICADOR) (var $1)]
               [(STRING) (value $1)]))
    ))

(define (parse ip)
  (prop-testv1-parser (lambda () (next-token ip))))

(provide parse)